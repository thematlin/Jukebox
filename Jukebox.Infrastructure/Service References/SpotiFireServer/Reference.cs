//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Jukebox.Infrastructure.SpotiFireServer {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthenticationStatus", Namespace="http://schemas.datacontract.org/2004/07/SpotiFire.Server")]
    public enum AuthenticationStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ok = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Bad = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RequireLogin = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Playlist", Namespace="http://schemas.datacontract.org/2004/07/SpotiFire.Server")]
    [System.SerializableAttribute()]
    public partial class Playlist : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsColaberativField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Jukebox.Infrastructure.SpotiFireServer.PlaylistType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageId {
            get {
                return this.ImageIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageIdField, value) != true)) {
                    this.ImageIdField = value;
                    this.RaisePropertyChanged("ImageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsColaberativ {
            get {
                return this.IsColaberativField;
            }
            set {
                if ((this.IsColaberativField.Equals(value) != true)) {
                    this.IsColaberativField = value;
                    this.RaisePropertyChanged("IsColaberativ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Jukebox.Infrastructure.SpotiFireServer.PlaylistType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlaylistType", Namespace="http://schemas.datacontract.org/2004/07/SpotiFire.Server")]
    public enum PlaylistType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Playlist = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FolderStart = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FolderEnd = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Track", Namespace="http://schemas.datacontract.org/2004/07/SpotiFire.Server")]
    [System.SerializableAttribute()]
    public partial class Track : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AlbumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtistAndNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Jukebox.Infrastructure.SpotiFireServer.Artist[] ArtistsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAvailableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsStarredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan LengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlaylistPositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PopularityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Album {
            get {
                return this.AlbumField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumField, value) != true)) {
                    this.AlbumField = value;
                    this.RaisePropertyChanged("Album");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtistAndName {
            get {
                return this.ArtistAndNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistAndNameField, value) != true)) {
                    this.ArtistAndNameField = value;
                    this.RaisePropertyChanged("ArtistAndName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Jukebox.Infrastructure.SpotiFireServer.Artist[] Artists {
            get {
                return this.ArtistsField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistsField, value) != true)) {
                    this.ArtistsField = value;
                    this.RaisePropertyChanged("Artists");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAvailable {
            get {
                return this.IsAvailableField;
            }
            set {
                if ((this.IsAvailableField.Equals(value) != true)) {
                    this.IsAvailableField = value;
                    this.RaisePropertyChanged("IsAvailable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsStarred {
            get {
                return this.IsStarredField;
            }
            set {
                if ((this.IsStarredField.Equals(value) != true)) {
                    this.IsStarredField = value;
                    this.RaisePropertyChanged("IsStarred");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Length {
            get {
                return this.LengthField;
            }
            set {
                if ((this.LengthField.Equals(value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlaylistPosition {
            get {
                return this.PlaylistPositionField;
            }
            set {
                if ((this.PlaylistPositionField.Equals(value) != true)) {
                    this.PlaylistPositionField = value;
                    this.RaisePropertyChanged("PlaylistPosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Popularity {
            get {
                return this.PopularityField;
            }
            set {
                if ((this.PopularityField.Equals(value) != true)) {
                    this.PopularityField = value;
                    this.RaisePropertyChanged("Popularity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Artist", Namespace="http://schemas.datacontract.org/2004/07/SpotiFire.Server")]
    [System.SerializableAttribute()]
    public partial class Artist : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Link {
            get {
                return this.LinkField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkField, value) != true)) {
                    this.LinkField = value;
                    this.RaisePropertyChanged("Link");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpotifyStatus", Namespace="http://schemas.datacontract.org/2004/07/SpotiFire.Server")]
    [System.SerializableAttribute()]
    public partial class SpotifyStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanGoBackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanGoNextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CanStartPlaybackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Jukebox.Infrastructure.SpotiFireServer.Track CurrentTrackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPlayingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan LengthPlayedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RepeatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ShuffleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VolumeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanGoBack {
            get {
                return this.CanGoBackField;
            }
            set {
                if ((this.CanGoBackField.Equals(value) != true)) {
                    this.CanGoBackField = value;
                    this.RaisePropertyChanged("CanGoBack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanGoNext {
            get {
                return this.CanGoNextField;
            }
            set {
                if ((this.CanGoNextField.Equals(value) != true)) {
                    this.CanGoNextField = value;
                    this.RaisePropertyChanged("CanGoNext");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanStartPlayback {
            get {
                return this.CanStartPlaybackField;
            }
            set {
                if ((this.CanStartPlaybackField.Equals(value) != true)) {
                    this.CanStartPlaybackField = value;
                    this.RaisePropertyChanged("CanStartPlayback");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Jukebox.Infrastructure.SpotiFireServer.Track CurrentTrack {
            get {
                return this.CurrentTrackField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentTrackField, value) != true)) {
                    this.CurrentTrackField = value;
                    this.RaisePropertyChanged("CurrentTrack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPlaying {
            get {
                return this.IsPlayingField;
            }
            set {
                if ((this.IsPlayingField.Equals(value) != true)) {
                    this.IsPlayingField = value;
                    this.RaisePropertyChanged("IsPlaying");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan LengthPlayed {
            get {
                return this.LengthPlayedField;
            }
            set {
                if ((this.LengthPlayedField.Equals(value) != true)) {
                    this.LengthPlayedField = value;
                    this.RaisePropertyChanged("LengthPlayed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Repeat {
            get {
                return this.RepeatField;
            }
            set {
                if ((this.RepeatField.Equals(value) != true)) {
                    this.RepeatField = value;
                    this.RaisePropertyChanged("Repeat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Shuffle {
            get {
                return this.ShuffleField;
            }
            set {
                if ((this.ShuffleField.Equals(value) != true)) {
                    this.ShuffleField = value;
                    this.RaisePropertyChanged("Shuffle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Volume {
            get {
                return this.VolumeField;
            }
            set {
                if ((this.VolumeField.Equals(value) != true)) {
                    this.VolumeField = value;
                    this.RaisePropertyChanged("Volume");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Search", Namespace="http://schemas.datacontract.org/2004/07/SpotiFire.Server")]
    [System.SerializableAttribute()]
    public partial class Search : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Jukebox.Infrastructure.SpotiFireServer.Album[] AlbumsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Jukebox.Infrastructure.SpotiFireServer.Artist[] ArtistsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DidYouMeanField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QueryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalAlbumsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalArtistsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalTracksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Jukebox.Infrastructure.SpotiFireServer.Track[] TracksField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Jukebox.Infrastructure.SpotiFireServer.Album[] Albums {
            get {
                return this.AlbumsField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumsField, value) != true)) {
                    this.AlbumsField = value;
                    this.RaisePropertyChanged("Albums");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Jukebox.Infrastructure.SpotiFireServer.Artist[] Artists {
            get {
                return this.ArtistsField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistsField, value) != true)) {
                    this.ArtistsField = value;
                    this.RaisePropertyChanged("Artists");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DidYouMean {
            get {
                return this.DidYouMeanField;
            }
            set {
                if ((object.ReferenceEquals(this.DidYouMeanField, value) != true)) {
                    this.DidYouMeanField = value;
                    this.RaisePropertyChanged("DidYouMean");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Query {
            get {
                return this.QueryField;
            }
            set {
                if ((object.ReferenceEquals(this.QueryField, value) != true)) {
                    this.QueryField = value;
                    this.RaisePropertyChanged("Query");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalAlbums {
            get {
                return this.TotalAlbumsField;
            }
            set {
                if ((this.TotalAlbumsField.Equals(value) != true)) {
                    this.TotalAlbumsField = value;
                    this.RaisePropertyChanged("TotalAlbums");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalArtists {
            get {
                return this.TotalArtistsField;
            }
            set {
                if ((this.TotalArtistsField.Equals(value) != true)) {
                    this.TotalArtistsField = value;
                    this.RaisePropertyChanged("TotalArtists");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalTracks {
            get {
                return this.TotalTracksField;
            }
            set {
                if ((this.TotalTracksField.Equals(value) != true)) {
                    this.TotalTracksField = value;
                    this.RaisePropertyChanged("TotalTracks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Jukebox.Infrastructure.SpotiFireServer.Track[] Tracks {
            get {
                return this.TracksField;
            }
            set {
                if ((object.ReferenceEquals(this.TracksField, value) != true)) {
                    this.TracksField = value;
                    this.RaisePropertyChanged("Tracks");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Album", Namespace="http://schemas.datacontract.org/2004/07/SpotiFire.Server")]
    [System.SerializableAttribute()]
    public partial class Album : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Jukebox.Infrastructure.SpotiFireServer.Artist ArtistField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CoverIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Jukebox.Infrastructure.SpotiFireServer.sp_albumtype TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YearField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Jukebox.Infrastructure.SpotiFireServer.Artist Artist {
            get {
                return this.ArtistField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistField, value) != true)) {
                    this.ArtistField = value;
                    this.RaisePropertyChanged("Artist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CoverId {
            get {
                return this.CoverIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CoverIdField, value) != true)) {
                    this.CoverIdField = value;
                    this.RaisePropertyChanged("CoverId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Jukebox.Infrastructure.SpotiFireServer.sp_albumtype Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Year {
            get {
                return this.YearField;
            }
            set {
                if ((this.YearField.Equals(value) != true)) {
                    this.YearField = value;
                    this.RaisePropertyChanged("Year");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="sp_albumtype", Namespace="http://schemas.datacontract.org/2004/07/SpotiFire.SpotifyLib")]
    public enum sp_albumtype : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SP_ALBUMTYPE_ALBUM = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SP_ALBUMTYPE_SINGLE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SP_ALBUMTYPE_COMPILATION = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SP_ALBUMTYPE_UNKNOWN = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SpotiFireServer.Spotify", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface Spotify {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Spotify/Authenticate", ReplyAction="http://tempuri.org/Spotify/AuthenticateResponse")]
        Jukebox.Infrastructure.SpotiFireServer.AuthenticationStatus Authenticate(string password);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/Spotify/Login", ReplyAction="http://tempuri.org/Spotify/LoginResponse")]
        bool Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/Spotify/GetPlaylists", ReplyAction="http://tempuri.org/Spotify/GetPlaylistsResponse")]
        Jukebox.Infrastructure.SpotiFireServer.Playlist[] GetPlaylists();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/Spotify/GetPlaylistTracks", ReplyAction="http://tempuri.org/Spotify/GetPlaylistTracksResponse")]
        Jukebox.Infrastructure.SpotiFireServer.Track[] GetPlaylistTracks(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/Spotify/PlayPlaylistTrack")]
        void PlayPlaylistTrack(System.Guid playlistId, int position);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/Spotify/SetShuffle")]
        void SetShuffle(bool random);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/Spotify/SetRepeat")]
        void SetRepeat(bool repeat);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/Spotify/GetStatus", ReplyAction="http://tempuri.org/Spotify/GetStatusResponse")]
        Jukebox.Infrastructure.SpotiFireServer.SpotifyStatus GetStatus();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/Spotify/Exit")]
        void Exit();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/Spotify/SetVolume")]
        void SetVolume(int volume);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/Spotify/PlayPause")]
        void PlayPause(System.Guid playlistId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/Spotify/EnqueueTrack")]
        void EnqueueTrack(System.Guid playlistId, int position);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/Spotify/GetQueue", ReplyAction="http://tempuri.org/Spotify/GetQueueResponse")]
        Jukebox.Infrastructure.SpotiFireServer.Track[] GetQueue();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/Spotify/GetCustomQueue", ReplyAction="http://tempuri.org/Spotify/GetCustomQueueResponse")]
        Jukebox.Infrastructure.SpotiFireServer.Track[] GetCustomQueue();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/Spotify/PlayNext")]
        void PlayNext(System.Guid playlistId);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/Spotify/GetCurrentTrack", ReplyAction="http://tempuri.org/Spotify/GetCurrentTrackResponse")]
        Jukebox.Infrastructure.SpotiFireServer.Track GetCurrentTrack();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/Spotify/Search", ReplyAction="http://tempuri.org/Spotify/SearchResponse")]
        Jukebox.Infrastructure.SpotiFireServer.Search Search(string query);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/Spotify/AddTrackFromSearchToPlaylist")]
        void AddTrackFromSearchToPlaylist(System.Guid playlistId, string query, string trackId);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/Spotify/PlaySearchedTrack", ReplyAction="http://tempuri.org/Spotify/PlaySearchedTrackResponse")]
        Jukebox.Infrastructure.SpotiFireServer.Track PlaySearchedTrack(System.Guid playlistId, string query, string trackId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface SpotifyChannel : Jukebox.Infrastructure.SpotiFireServer.Spotify, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SpotifyClient : System.ServiceModel.ClientBase<Jukebox.Infrastructure.SpotiFireServer.Spotify>, Jukebox.Infrastructure.SpotiFireServer.Spotify {
        
        public SpotifyClient() {
        }
        
        public SpotifyClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SpotifyClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SpotifyClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SpotifyClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Jukebox.Infrastructure.SpotiFireServer.AuthenticationStatus Authenticate(string password) {
            return base.Channel.Authenticate(password);
        }
        
        public bool Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public Jukebox.Infrastructure.SpotiFireServer.Playlist[] GetPlaylists() {
            return base.Channel.GetPlaylists();
        }
        
        public Jukebox.Infrastructure.SpotiFireServer.Track[] GetPlaylistTracks(System.Guid id) {
            return base.Channel.GetPlaylistTracks(id);
        }
        
        public void PlayPlaylistTrack(System.Guid playlistId, int position) {
            base.Channel.PlayPlaylistTrack(playlistId, position);
        }
        
        public void SetShuffle(bool random) {
            base.Channel.SetShuffle(random);
        }
        
        public void SetRepeat(bool repeat) {
            base.Channel.SetRepeat(repeat);
        }
        
        public Jukebox.Infrastructure.SpotiFireServer.SpotifyStatus GetStatus() {
            return base.Channel.GetStatus();
        }
        
        public void Exit() {
            base.Channel.Exit();
        }
        
        public void SetVolume(int volume) {
            base.Channel.SetVolume(volume);
        }
        
        public void PlayPause(System.Guid playlistId) {
            base.Channel.PlayPause(playlistId);
        }
        
        public void EnqueueTrack(System.Guid playlistId, int position) {
            base.Channel.EnqueueTrack(playlistId, position);
        }
        
        public Jukebox.Infrastructure.SpotiFireServer.Track[] GetQueue() {
            return base.Channel.GetQueue();
        }
        
        public Jukebox.Infrastructure.SpotiFireServer.Track[] GetCustomQueue() {
            return base.Channel.GetCustomQueue();
        }
        
        public void PlayNext(System.Guid playlistId) {
            base.Channel.PlayNext(playlistId);
        }
        
        public Jukebox.Infrastructure.SpotiFireServer.Track GetCurrentTrack() {
            return base.Channel.GetCurrentTrack();
        }
        
        public Jukebox.Infrastructure.SpotiFireServer.Search Search(string query) {
            return base.Channel.Search(query);
        }
        
        public void AddTrackFromSearchToPlaylist(System.Guid playlistId, string query, string trackId) {
            base.Channel.AddTrackFromSearchToPlaylist(playlistId, query, trackId);
        }
        
        public Jukebox.Infrastructure.SpotiFireServer.Track PlaySearchedTrack(System.Guid playlistId, string query, string trackId) {
            return base.Channel.PlaySearchedTrack(playlistId, query, trackId);
        }
    }
}
